%%%% Code to run classification task using variations of DTW+S %%%%%%%%%%
% On MacOS and Linux, there may be an error with dtw_cons_md_mex. In that case,
% the mex file needs to be regenerated by compiling the source code using
% "mex". Alternatively, replace all calls to "dtw_cons_md_mex" with "dtw_cons_md"
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

addpath("../shapelet_space_matlab");

xx = genpath('../../UCR_TS_Archive_2015');
yy = strsplit(xx, {';', ':'})';
%%
count = 0;

DTW_S_error = inf(length(yy), 1);
Dataset = cell(length(yy), 1);
best_wins = zeros(length(yy), 1);
best_smooths = zeros(length(yy), 1);
%%
for pidx = 1:length(yy)
    if length(yy{pidx}) < 2
        continue;
    end
    if isunix
        flist = strsplit(ls(yy{pidx}));
        fold_char = '/';
    else
        flist = cellstr(ls(yy{pidx}));
        fold_char = '\';
    end
    tr_idx = find(endsWith(flist, 'TRAIN'));
    te_idx = find(endsWith(flist, 'TEST'));

    if isempty(tr_idx) || isempty(te_idx)
        continue;
    end
    
    TRAIN = load([yy{pidx} fold_char flist{tr_idx}]); 
    if size(TRAIN, 1) > 700 || size(TRAIN, 2) > 800
        continue;
    end

    TEST = load([yy{pidx} fold_char flist{te_idx}]); 
    
    t_elapsed = 0;

    Dataset{pidx} = flist{tr_idx}(1:end-6); 

    tic; 
    [DTW_S_error(pidx), best_wins(pidx), best_smooths(pidx)] =  UCR_time_series_test(TRAIN, TEST, 1, [1e-10 1 2 3 4 5 6 7]/100, 1, [0.4 0.2 0.1 0]); 
    t_elapsed = toc;


    disp(['Done for ' Dataset{pidx} ', runtime:' num2str(t_elapsed) ', ...' ...
        'error:' num2str(DTW_S_error(pidx)) ', with smoothness: ' num2str(best_smooths(pidx))]);

end
save with_more_validation_smooth
%% Load some previously run versions

xx=  load('three_shapelet_w10.mat'); % No validation, win = 10
DTW_S_10 = xx.DTW_S_error;
xx=  load('with_more_validation.mat'); % With validation
DTW_S_val = xx.DTW_S_error;
clear xx
xx = load('with_more_validation_corr.mat'); % with validation, but correlation instead of shapelet space representation
DTW_S_val_corr =xx.DTW_S_error;
%% Create table with the results
T = table;
T.DTW_S_val_corr = DTW_S_val_corr;
T.DTW_S_10 = DTW_S_10;
T.DTW_S_val = DTW_S_val;
T.DTW_S_smooth = DTW_S_error;
for ii=1:length(Dataset)
    if ~isempty(Dataset{ii})
        Dataset{ii} = lower(Dataset{ii});
    end
end
T.Name = Dataset;
%%
T(isinf(T.DTW_S_val), :) = [];
%% Load the published DTW results

T_dtw = readtable("DataSummary.csv");
T_dtw.Name = lower(T_dtw.Name);
T1 = innerjoin(T_dtw, T);
%% Extract DTW learned windows and performance
DTW_learned_w_ = cellfun(@str2num, regexprep(T1.DTW_learned_w_, '\([^()]*\)|\s*', ''));
[st_idx, e_idx] = regexp(T1.DTW_learned_w_, '\([\d]*\)');
xx = [st_idx, e_idx]; xxm = cell2mat(xx);
DTW_best_win = zeros(length(DTW_learned_w_), 1);
for ii=1:length(DTW_best_win)
    DTW_best_win(ii) = str2double(T1.DTW_learned_w_{ii}(xxm(ii, 1)+1:xxm(ii, 2)-1));
end

%%
save with_more_validation_smooth.mat